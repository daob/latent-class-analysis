---
title: "Political activism in Greece"
author: "DL Oberski"
format: 
  html:
    theme: zephyr
    toc: true
    code-tools: true
    code-link: true
editor: visual
execute:
  cache: true
---

## Political activism in ESS

```{r}
#| message: false

set.seed(202303)

library(tidyverse)
library(broom)
library(haven)
library(poLCA)
```

### Data

Read the data from the European Social Survey, round 4 (Greece).

For each of these survey questions, 1="Yes" and 2="No".

- `contplt` - Contacted politician or government official last 12 months
- `wrkprty` - Worked in political party or action group last 12 months
- `wrkorg` - Worked in another organisation or association last 12 months
- `badge` - Worn or displayed campaign badge/sticker last 12 months
- `sgnptit` - Signed petition last 12 months
- `pbldmn` - Taken part in lawful public demonstration last 12 months
- `bctprd` - Boycotted certain products last 12 months 
- `gndr` - Gender 
-  `agea` - Age of respondent, calculated 

```{r}
#| message: false
ess_greece <- read_csv("https://daob.nl/files/lca/ess_greece.csv.gz") 

ess_greece |> rmarkdown::paged_table()
```
Sadly, `poLCA` has no way of dealing with missing values other than "listwise deletion" (`na.omit`). For later comparability of models with different sets of variables, we create a single dataset without missings. 

```{r}
ess_greece <- na.omit(ess_greece)
```

Show the data as pattern frequencies.

```{r}
table(ess_greece) %>% 
  as.data.frame() %>%
  filter(Freq != 0) %>% 
  rmarkdown::paged_table()
```
### Try out models with different number of classes 

Create a convenience function that will fit the K-class model to
the political participation data.

```{r}
fitLCA <- function(k) {
  f <- cbind(contplt, wrkprty, wrkorg, badge, 
           sgnptit, pbldmn, bctprd) ~ 1
  
  poLCA(formula = f, data = ess_greece, nclass = k, 
        nrep = 10, verbose = FALSE)
}
```

Apply the function to successively increasingly classes K = 1, 2, 3, ..., 6. (Note: this can take a while!)

```{r}
MK <- lapply(1:6, fitLCA)
```

### Compare model fit

Possible to look at AIC, BIC, etc.

```{r}
aic_values <- sapply(MK, `[[`, "aic")
bic_values <- sapply(MK, `[[`, "bic")
```

```{r}
plot(seq_along(aic_values), aic_values, type = "b", xlab = "Number of classes", ylab = "AIC", las = 2)
```

```{r}
plot(seq_along(aic_values), aic_values, type = "b", xlab = "Number of classes", ylab = "BIC", las = 2)
```



### Select a model


We select the four-class model.
```{r}
form_activism <- cbind(contplt, wrkprty, wrkorg, 
                       badge, sgnptit, pbldmn, bctprd) ~ 1

fit <- poLCA(form_activism, 
             data = ess_greece, 
             nclass = 4, 
             nrep = 20, verbose = FALSE)
```

Here is the default plot given by `polCA`.

```{r}
plot(fit)
```

In this case the default plot is still somewhat readable, but in practice it is not the best as data visualizations go. A simple line plot does a better job (in my personal & completely subjective opinion!) and allows you to display confidence intervals to boot. We use `tidy` from the `broom` package to extract the results and `ggplot` to plot.

```{r}
#| message: false
#| warning: false
tidy(fit) %>% # from `broom` package
  filter(outcome == 2) %>% 
  mutate(class = as.factor(class)) %>%
  ggplot(aes(variable, estimate, group = class, color = class)) +
  geom_point() + geom_line() + 
  geom_errorbar(aes(ymin = estimate - 2*std.error, 
                    ymax = estimate + 2*std.error), width = 0.2) +
  theme_bw() + scale_color_brewer(palette = "Set2")
```

### Local fit

```{r}
library(poLCA.extras)

bvr(fit)
```
```{r}
bootstrap_bvr_pvals(form_activism, fit, ess_greece, R = 200)
```

### Classification quality

Create a data frame with the posterior class memberships and predicted class has the actual classification (predclass is the "modal assignment")

Use the four-class model as the selected model

```{r}
posteriors <- data.frame(post = fit$posterior,
                         predclass = fit$predclass)

classification_table <- posteriors %>% 
  group_by(predclass) %>% 
  summarize(across(starts_with("post."), ~ sum(.x)))

classification_table <- classification_table[,-1] |> as.matrix()

# Adopt the notation X=true latent class, W=assigned class
colnames(classification_table) <- paste0("X=", 1:4)
rownames(classification_table) <- paste0("W=", 1:4)

classification_table %>% round(1)
```

With column proportions:

```{r}
classification_table |>
  prop.table(2) |> 
  round(3)
```

#### Entropy $R^2$ and classification errors

Calculate classification errors from classification table:

```{r}
1 - sum(diag(classification_table)) / sum(classification_table)
```

Entropy $R^2$:

```{r}
entropy <- function(p) sum(-p * log(p))

error_prior <- entropy(fit$P) # Class proportions
error_post <- mean(apply(fit$posterior, 1, entropy))
(R2_entropy  <- (error_prior - error_post) / error_prior) # 0.741
```

### Model with covariates

Now we fit the four-class model, but include covariates that predict the class membership. Class membership is predicted by gender and a quadratic age effect.

We also use the results from the model without covariates as starting values for the solution. 

This is where the analyzed data would have been different if we had not already deleted all cases with at least one missing value above using `na.omit`. In practice this may lead to trouble, especially when there are many variables. 

```{r}
form_activism <- cbind(contplt, wrkprty, wrkorg, 
                       badge, sgnptit, pbldmn, bctprd) ~ 
  gndr + agea + I(agea^2)

fit_covariates <- 
  poLCA(form_activism, 
        data = ess_greece, nclass = 4, 
        probs.start = fit$probs, 
        verbose = FALSE, nrep = 50)
```

The results now include multinomial regression coefficients in a model predicting class membership. 

```{r}
fit_covariates
```
The solution may have changed now that covariates are included.  

```{r}
#| message: false
#| warning: false
tidy(fit_covariates) %>% 
  filter(outcome == 2) %>% 
  mutate(class = as.factor(class)) %>%
  ggplot(aes(variable, estimate, group = class, color = class)) +
  geom_point() + geom_line() + 
  geom_errorbar(aes(ymin = estimate - 2*std.error, 
                    ymax = estimate + 2*std.error), width = 0.2) +
  theme_bw() + scale_color_brewer(palette = "Set2")
```


#### Effects plot

We can easily plot the results of the multinomial model using the `effects` library. 

```{r}
#| message: false
library(effects)
```

```{r}
effect_age <- predictorEffects(fit_covariates, ~agea*gndr)
plot(effect_age, lines=list(multiline=TRUE))
```


#### Three-step method using hand-rolled BCH  weights

```{r}
M <- prop.table(classification_table, 2) 
Mi <- solve(M) # Weight matrix
K <- ncol(M) # Number of classes 

# The data used by poLCA (may differ from raw due to missings):
dat_used_by_fit <- ess_greece
# Assigned class membership (by default uses modal assignment):
dat_used_by_fit$W <- fit$predclass 
dat_used_by_fit$id_obs <- seq(NROW(dat_used_by_fit))

# Create expanded dataset with K rows for each observation:
ess_greece_expanded <- replicate(K, dat_used_by_fit, simplify = FALSE) |> 
  reduce(rbind)

# Each of the replicated rows will correspond to one possible
#.  value of the true latent class:
ess_greece_expanded$X <- rep(1:K, each = NROW(dat_used_by_fit))

# Now we assign the BCH weights based on the 
#.   inverse- misclassification matrix Mi
ess_greece_expanded <- ess_greece_expanded %>%
  mutate(w_bch = Mi[cbind(X, W)]) 

# Show a few rows of our constructed data:
ess_greece_expanded %>% arrange(id_obs) %>% head()
```
The only library I was able to find that is both reliable and also does multinomial regression allowing _negative weights_ is `glmnet`. 

```{r}
#| message: false
library(glmnet)

# We use glmnet with our BCH weights, w_bch, pretending X
#.  is observed. Set alpha and lambda =
fit_glmnet <- with(ess_greece_expanded %>% 
                     mutate(age_sq = agea^2),
     glmnet(cbind(gndr, agea, age_sq), X, weights =w_bch, 
            family = "multinomial", alpha = 0, lambda = 0))

# The estimted coefficients
fit_glmnet |> 
  coef() |> 
  reduce(cbind) |>
  round(4)

# effects library does not work with glmnet so we have to roll
#.  our own (again)
ef <- ess_greece %>% 
  summarize(agea = sort(unique(agea)), 
            age_sq = agea^2,
            gndr = 1.5) %>% 
  bind_cols(predict(fit_glmnet, newx=as.matrix(.), 
                   type = "response")[,,1])

names(ef)[4:7] <- paste0("X", 1:4)

# Show the effects plot
ef %>% 
  pivot_longer(X1:X4, names_to = "Class", values_to = "Prob") %>%
  ggplot(aes(agea, Prob, colour = Class, group = Class)) +
  geom_line() + theme_bw() + 
  scale_color_brewer(palette = "Set2")
```
It gives results similar to those obtained with the one-step method.

### SessionInfo

```{r}
sessionInfo()
```

